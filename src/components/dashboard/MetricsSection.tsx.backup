import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { TrendingUp, Heart, Target, Sparkles, MessageCircle } from "lucide-react";

interface MetricsSectionProps {
  valuesJson: Record<string, number>;
  motivationsJson: Record<string, number>;
  archetypesJson: Record<string, number>;
  avgSentiment: number | null;
  sessions: Array<{
    id: string;
    started_at: string;
    ended_at: string | null;
    channel: string;
  }>;
}

export function MetricsSection({
  valuesJson,
  motivationsJson,
  archetypesJson,
  avgSentiment,
  sessions,
}: MetricsSectionProps) {
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const getSentimentLabel = (sentiment: number | null) => {
    if (sentiment === null) return 'Neutral';
    if (sentiment > 0.3) return 'Positive';
    if (sentiment < -0.3) return 'Negative';
    return 'Neutral';
  };

  const getSentimentColor = (sentiment: number | null) => {
    if (sentiment === null) return 'text-gray-500';
    if (sentiment > 0.3) return 'text-green-600 dark:text-green-400';
    if (sentiment < -0.3) return 'text-red-600 dark:text-red-400';
    return 'text-gray-500';
  };

  return (
    <div className="grid md:grid-cols-2 gap-6">
      {/* Values Card */}
      <Card className="shadow-[var(--shadow-soft)]">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-foreground">
            <Heart className="h-5 w-5 text-primary" />
            Core Values
          </CardTitle>
          <CardDescription className="text-muted-foreground">
            What matters most to you
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {Object.entries(valuesJson || {}).length > 0 ? (
            Object.entries(valuesJson)
              .sort(([, a], [, b]) => b - a)
              .slice(0, 5)
              .map(([value, score]) => (
                <div key={value} className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span className="font-medium text-foreground capitalize">{value}</span>
                    <span className="text-muted-foreground">{Math.round(score * 100)}%</span>
                  </div>
                  <Progress value={score * 100} className="h-2" />
                </div>
              ))
          ) : (
            <div className="text-center py-8 text-muted-foreground">
              Complete sessions to discover your values
            </div>
          )}
        </CardContent>
      </Card>

      {/* Motivations Card */}
      <Card className="shadow-[var(--shadow-soft)]">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-foreground">
            <Target className="h-5 w-5 text-primary" />
            Motivations
          </CardTitle>
          <CardDescription className="text-muted-foreground">
            How you approach goals
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {Object.entries(motivationsJson || {}).length > 0 ? (
            Object.entries(motivationsJson)
              .sort(([, a], [, b]) => b - a)
              .map(([motivation, score]) => (
                <div key={motivation} className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span className="font-medium text-foreground capitalize">{motivation}</span>
                    <span className="text-muted-foreground">{Math.round(score * 100)}%</span>
                  </div>
                  <Progress value={score * 100} className="h-2" />
                </div>
              ))
          ) : (
            <div className="text-center py-8 text-muted-foreground">
              Complete sessions to discover your motivations
            </div>
          )}
        </CardContent>
      </Card>

      {/* Archetypes Card */}
      <Card className="shadow-[var(--shadow-soft)]">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-foreground">
            <Sparkles className="h-5 w-5 text-primary" />
            Archetypes
          </CardTitle>
          <CardDescription className="text-muted-foreground">
            Your personality patterns
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {Object.entries(archetypesJson || {}).length > 0 ? (
            Object.entries(archetypesJson)
              .sort(([, a], [, b]) => b - a)
              .slice(0, 5)
              .map(([archetype, score]) => (
                <div key={archetype} className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span className="font-medium text-foreground capitalize">{archetype}</span>
                    <span className="text-muted-foreground">{Math.round(score * 100)}%</span>
                  </div>
                  <Progress value={score * 100} className="h-2" />
                </div>
              ))
          ) : (
            <div className="text-center py-8 text-muted-foreground">
              Complete sessions to discover your archetypes
            </div>
          )}
        </CardContent>
      </Card>

      {/* Sentiment & Sessions Card */}
      <Card className="shadow-[var(--shadow-soft)]">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-foreground">
            <TrendingUp className="h-5 w-5 text-primary" />
            Overall Sentiment
          </CardTitle>
          <CardDescription className="text-muted-foreground">
            Emotional tone across sessions
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="text-center py-4">
            <div className={`text-4xl font-bold ${getSentimentColor(avgSentiment)}`}>
              {getSentimentLabel(avgSentiment)}
            </div>
            {avgSentiment !== null && (
              <div className="text-sm text-muted-foreground mt-2">
                Score: {(avgSentiment * 100).toFixed(1)}
              </div>
            )}
          </div>

          {/* Session History */}
          <div className="space-y-3 mt-6">
            <h4 className="font-medium text-foreground flex items-center gap-2">
              <MessageCircle className="h-4 w-4 text-primary" />
              Recent Sessions
            </h4>
            {sessions.length > 0 ? (
              <div className="space-y-2 max-h-[200px] overflow-y-auto">
                {sessions.map((session) => (
                  <div
                    key={session.id}
                    className="flex items-center justify-between p-2 bg-muted/50 rounded text-sm"
                  >
                    <div className="flex items-center gap-2">
                      <div className={`w-2 h-2 rounded-full ${
                        session.ended_at ? 'bg-green-500' : 'bg-yellow-500'
                      }`} />
                      <span className="text-muted-foreground capitalize">{session.channel}</span>
                    </div>
                    <span className="text-xs text-muted-foreground">
                      {formatDate(session.started_at)}
                    </span>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-4 text-muted-foreground text-sm">
                No sessions yet
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
